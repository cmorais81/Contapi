version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: data-governance-postgres
    environment:
      POSTGRES_DB: data_governance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./scripts/mock-data.sql:/docker-entrypoint-initdb.d/mock-data.sql
    ports:
      - "5432:5432"
    networks:
      - data-governance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d data_governance"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: data-governance-redis
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - data-governance-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Data Governance API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: data-governance-api
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/data_governance
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      DATABASE_ECHO: false
      
      # Redis
      REDIS_URL: redis://:redis123@redis:6379/0
      
      # Server
      HOST: 0.0.0.0
      PORT: 8000
      ENVIRONMENT: production
      
      # Security
      SECRET_KEY: your-super-secret-key-change-in-production
      ACCESS_TOKEN_EXPIRE_HOURS: 24
      ALGORITHM: HS256
      
      # Logging
      LOG_LEVEL: INFO
      
      # CORS
      ALLOWED_HOSTS: '["*"]'
      
      # Features
      ENABLE_METRICS: true
      ENABLE_TRACING: true
      ENABLE_CACHING: true
    ports:
      - "8000:8000"
    networks:
      - data-governance-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Development API (for development environment)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: data-governance-api-dev
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/data_governance
      DATABASE_POOL_SIZE: 10
      DATABASE_MAX_OVERFLOW: 20
      DATABASE_ECHO: true
      
      # Redis
      REDIS_URL: redis://:redis123@redis:6379/1
      
      # Server
      HOST: 0.0.0.0
      PORT: 8000
      ENVIRONMENT: development
      
      # Security
      SECRET_KEY: dev-secret-key
      ACCESS_TOKEN_EXPIRE_HOURS: 24
      ALGORITHM: HS256
      
      # Logging
      LOG_LEVEL: DEBUG
      
      # CORS
      ALLOWED_HOSTS: '["*"]'
      
      # Features
      ENABLE_METRICS: true
      ENABLE_TRACING: true
      ENABLE_CACHING: false
    ports:
      - "8001:8000"
    networks:
      - data-governance-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
    command: ["python", "main.py"]
    profiles:
      - dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: data-governance-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - data-governance-network
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: data-governance-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - data-governance-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: data-governance-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - data-governance-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: data-governance-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@datagovernance.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - data-governance-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: data-governance-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:1:redis123
    ports:
      - "8081:8081"
    networks:
      - data-governance-network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  data-governance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

